{"version":3,"sources":["../../../projects/ngx-gauge/src/common/util.ts","../../../projects/ngx-gauge/src/gauge/gauge-directives.ts","../../../projects/ngx-gauge/src/gauge/gauge.ts","../../../projects/ngx-gauge/src/ngx-gauge.module.ts"],"names":["coerceNumberProperty","value","fallbackValue","isNaN","parseFloat","Number","cssUnit","Directive","args","selector","exportAs","DEFAULTS","NgxGauge","_elementRef","_renderer","this","_size","_min","_max","_animate","_initialized","_animationRequestID","ariaLabel","ariaLabelledby","type","cap","thick","foregroundColor","backgroundColor","thresholds","Object","create","preserveThresholds","_value","duration","defineProperty","prototype","coerceBooleanProperty","val","ngOnChanges","changes","isCanvasPropertyChanged","isDataChanged","nv","ov","currentValue","previousValue","_update","_destroy","_init","_updateSize","setStyle","nativeElement","_getWidth","_getCanvasHeight","_canvas","width","height","_label","size","_reading","ngAfterViewInit","ngOnDestroy","_getBounds","head","tail","Math","PI","_drawShell","start","middle","color","_drawShellWithSegments","center","_getCenter","radius","_getRadius","max","min","_clear","_context","beginPath","strokeStyle","arc","x","y","stroke","percentages","keys","arcLength","valuePercent","i","length","startPercentage","nextPercentage","percentageToTravel","fallbackColor","percentageOfCurrentArc","activeArcEnd","_drawArc","inactiveArcEnd","arcColor","end","clearRect","_getHeight","getContext","_setupStyles","_create","window","cancelAnimationFrame","lineCap","lineWidth","_getForegroundColorByRange","match","filter","item","undefined","isNumber","sort","a","b","reverse","startTime","self","bounds","clamp","unit","displacement","animate","timestamp","runtime","Date","getTime","progress","requestAnimationFrame","Component","template","host","role","aria-readonly","[class.ngx-gauge-meter]","[attr.aria-valuemin]","[attr.aria-valuemax]","[attr.aria-valuenow]","[attr.aria-label]","[attr.aria-labelledby]","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","ViewChild","static","ContentChild","NgxGaugeLabel","NgxGaugePrepend","NgxGaugeAppend","NgxGaugeValue","Input","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["export function clamp(value: number, min: number, max: number): number {\r\n    return Math.max(min, Math.min(max, value));\r\n}\r\nexport function coerceBooleanProperty(value: any): boolean {\r\n    return value != null && `${value}` !== 'false';\r\n}\r\nexport function coerceNumberProperty(value: any, fallbackValue: number = 0): number {\r\n    return isNaN(parseFloat(value)) || isNaN(Number(value)) ? fallbackValue : Number(value);\r\n}\r\nexport function cssUnit(value: number) {\r\n    return `${value}px`;\r\n}\r\nexport function isNumber(value: string) {\r\n    return value != undefined && !isNaN(parseFloat(value)) && !isNaN(Number(value));\r\n}","import { Directive } from \"@angular/core\";\r\n\r\n@Directive({\r\n  selector: \"ngx-gauge-append\",\r\n  exportAs: \"ngxGaugeAppend\"\r\n})\r\nexport class NgxGaugeAppend {}\r\n\r\n@Directive({\r\n  selector: \"ngx-gauge-prepend\",\r\n  exportAs: \"ngxGaugePrepend\"\r\n})\r\nexport class NgxGaugePrepend {}\r\n\r\n@Directive({\r\n  selector: \"ngx-gauge-value\",\r\n  exportAs: \"ngxGaugeValue\"\r\n})\r\nexport class NgxGaugeValue {}\r\n\r\n@Directive({\r\n  selector: \"ngx-gauge-label\",\r\n  exportAs: \"ngxGaugeLabel\"\r\n})\r\nexport class NgxGaugeLabel {}\r\n","import {\r\n    Component,\r\n    Input,\r\n    SimpleChanges,\r\n    ViewEncapsulation,\r\n    Renderer2,\r\n    AfterViewInit,\r\n    ElementRef,\r\n    OnChanges,\r\n    OnDestroy,\r\n    ViewChild,\r\n    ContentChild\r\n} from '@angular/core';\r\nimport { NgxGaugeError } from './gauge-error';\r\nimport {\r\n    clamp,\r\n    coerceBooleanProperty,\r\n    coerceNumberProperty,\r\n    cssUnit,\r\n    isNumber\r\n} from '../common/util';\r\nimport { NgxGaugeLabel, NgxGaugeValue, NgxGaugePrepend, NgxGaugeAppend } from './gauge-directives';\r\n\r\nconst DEFAULTS = {\r\n    MIN: 0,\r\n    MAX: 100,\r\n    TYPE: 'arch',\r\n    THICK: 4,\r\n    FOREGROUND_COLOR: 'rgba(0, 150, 136, 1)',\r\n    BACKGROUND_COLOR: 'rgba(0, 0, 0, 0.1)',\r\n    CAP: 'butt',\r\n    SIZE: 200\r\n};\r\n\r\nexport type NgxGaugeType = 'full' | 'arch' | 'semi';\r\nexport type NgxGaugeCap = 'round' | 'butt';\r\n\r\n@Component({\r\n    selector: 'ngx-gauge',\r\n    templateUrl: 'gauge.html',\r\n    styleUrls: ['gauge.css'],\r\n    host: {\r\n        'role': 'slider',\r\n        'aria-readonly': 'true',\r\n        '[class.ngx-gauge-meter]': 'true',\r\n        '[attr.aria-valuemin]': 'min',\r\n        '[attr.aria-valuemax]': 'max',\r\n        '[attr.aria-valuenow]': 'value',\r\n        '[attr.aria-label]': 'ariaLabel',\r\n        '[attr.aria-labelledby]': 'ariaLabelledby'\r\n\r\n    },\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NgxGauge implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n    @ViewChild('canvas', { static: true }) _canvas: ElementRef;\r\n    @ViewChild('rLabel', { static: true }) _label: ElementRef;\r\n    @ViewChild('reading', { static: true }) _reading: ElementRef;\r\n\r\n    @ContentChild(NgxGaugeLabel) _labelChild: NgxGaugeLabel;\r\n    @ContentChild(NgxGaugePrepend) _prependChild: NgxGaugePrepend;\r\n    @ContentChild(NgxGaugeAppend) _appendChild: NgxGaugeAppend;\r\n    @ContentChild(NgxGaugeValue) _valueDisplayChild: NgxGaugeValue;\r\n\r\n    private _size: number = DEFAULTS.SIZE;\r\n    private _min: number = DEFAULTS.MIN;\r\n    private _max: number = DEFAULTS.MAX;\r\n    private _animate: boolean = true;\r\n\r\n    private _initialized: boolean = false;\r\n    private _context: CanvasRenderingContext2D;\r\n    private _animationRequestID: number = 0;\r\n\r\n    @Input('aria-label') ariaLabel: string = '';\r\n\r\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\r\n\r\n    @Input()\r\n    get size(): number { return this._size; }\r\n    set size(value: number) {\r\n        this._size = coerceNumberProperty(value);\r\n    }\r\n\r\n    @Input()\r\n    get min(): number { return this._min; }\r\n    set min(value: number) {\r\n        this._min = coerceNumberProperty(value, DEFAULTS.MIN);\r\n    }\r\n    @Input()\r\n    get animate(): boolean { return this._animate; }\r\n    set animate(value) {\r\n        this._animate = coerceBooleanProperty(value);\r\n    }\r\n\r\n    @Input()\r\n    get max(): number { return this._max; }\r\n    set max(value: number) {\r\n        this._max = coerceNumberProperty(value, DEFAULTS.MAX);\r\n    }\r\n\r\n    @Input() type: NgxGaugeType = DEFAULTS.TYPE as NgxGaugeType;\r\n\r\n    @Input() cap: NgxGaugeCap = DEFAULTS.CAP as NgxGaugeCap;\r\n\r\n    @Input() thick: number = DEFAULTS.THICK;\r\n\r\n    @Input() label: string;\r\n\r\n    @Input() append: string;\r\n\r\n    @Input() prepend: string;\r\n\r\n    @Input() foregroundColor: string = DEFAULTS.FOREGROUND_COLOR;\r\n\r\n    @Input() backgroundColor: string = DEFAULTS.BACKGROUND_COLOR;\r\n\r\n    @Input() thresholds: Object = Object.create(null);\r\n\r\n    // If set to true, thresholds will remain their color even if the gauge is in another threshold\r\n    @Input() preserveThresholds: Object = false;\r\n\r\n    private _value: number = 0;\r\n\r\n    @Input()\r\n    get value() { return this._value; }\r\n    set value(val: number) {\r\n        this._value = coerceNumberProperty(val);\r\n    }\r\n\r\n    @Input() duration: number = 1200;\r\n\r\n    constructor(private _elementRef: ElementRef, private _renderer: Renderer2) { }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const isCanvasPropertyChanged = changes['thick'] || changes['type'] || changes['cap'] || changes['size'];\r\n        const isDataChanged = changes['value'] || changes['min'] || changes['max'];\r\n\r\n        if (this._initialized) {\r\n            if (isDataChanged) {\r\n                let nv, ov;\r\n                if (changes['value']) {\r\n                    nv = changes['value'].currentValue;\r\n                    ov = changes['value'].previousValue;\r\n                }\r\n                this._update(nv, ov);\r\n            }\r\n            if (isCanvasPropertyChanged) {\r\n                this._destroy();\r\n                this._init();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _updateSize() {\r\n        this._renderer.setStyle(this._elementRef.nativeElement, 'width', cssUnit(this._getWidth()));\r\n        this._renderer.setStyle(this._elementRef.nativeElement, 'height', cssUnit(this._getCanvasHeight()));\r\n        this._canvas.nativeElement.width = this._getWidth();\r\n        this._canvas.nativeElement.height = this._getCanvasHeight();\r\n        this._renderer.setStyle(this._label.nativeElement,\r\n            'transform', 'translateY(' + (this.size / 3 * 2 - this.size / 13 / 4) + 'px)');\r\n        this._renderer.setStyle(this._reading.nativeElement,\r\n            'transform', 'translateY(' + (this.size / 2 - this.size * 0.22 / 2) + 'px)');\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this._canvas) {\r\n            this._init();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._destroy();\r\n    }\r\n\r\n    private _getBounds(type: NgxGaugeType) {\r\n        let head, tail;\r\n        if (type == 'semi') {\r\n            head = Math.PI;\r\n            tail = 2 * Math.PI;\r\n        } else if (type == 'full') {\r\n            head = 1.5 * Math.PI;\r\n            tail = 3.5 * Math.PI;\r\n        } else if (type === 'arch') {\r\n            head = 0.8 * Math.PI;\r\n            tail = 2.2 * Math.PI;\r\n        }\r\n        return { head, tail };\r\n    }\r\n\r\n    private _drawShell(start: number, middle: number, tail: number, color: string) {\r\n        if (this.preserveThresholds) {\r\n            this._drawShellWithSegments(start, middle, tail);\r\n            return;\r\n        }\r\n\r\n        let center = this._getCenter(),\r\n            radius = this._getRadius();\r\n\r\n        middle = Math.max(middle, start); // never below 0%\r\n        middle = Math.min(middle, tail); // never exceed 100%\r\n        if (this._initialized) {\r\n            this._clear();\r\n            this._context.beginPath();\r\n            this._context.strokeStyle = this.backgroundColor;\r\n            this._context.arc(center.x, center.y, radius, middle, tail, false);\r\n            this._context.stroke();\r\n\r\n            this._context.beginPath();\r\n            this._context.strokeStyle = color;\r\n            this._context.arc(center.x, center.y, radius, start, middle, false);\r\n            this._context.stroke();\r\n        }\r\n    }\r\n\r\n    private _drawShellWithSegments(start: number, currentValue: number, tail: number) {\r\n        if (this.thresholds && this._initialized) {\r\n            let percentages = Object.keys(this.thresholds),\r\n                arcLength = tail - start,\r\n                valuePercent = (currentValue - start) / arcLength;\r\n\r\n            this._clear();\r\n\r\n            for (let i = 0; i < percentages.length; i++) {\r\n                let startPercentage = (Number(percentages[i]) / 100),\r\n                    nextPercentage = (Number(percentages[i + 1]) / 100) || 1,\r\n                    percentageToTravel = (nextPercentage - startPercentage),\r\n                    color = this.thresholds[percentages[i]].color,\r\n                    fallbackColor = this.thresholds[percentages[i]].fallbackColor || this.backgroundColor;\r\n\r\n                if (valuePercent >= startPercentage && valuePercent <= nextPercentage) {\r\n                    let percentageOfCurrentArc = (valuePercent - startPercentage ) / percentageToTravel;\r\n                    let activeArcEnd = start + (arcLength * percentageToTravel * percentageOfCurrentArc);\r\n                    this._drawArc(start, activeArcEnd, color);\r\n                    \r\n                    let inactiveArcEnd = activeArcEnd + (arcLength * percentageToTravel * (1 - percentageOfCurrentArc));\r\n                    this._drawArc(activeArcEnd, inactiveArcEnd, fallbackColor);\r\n\r\n                    start = inactiveArcEnd;\r\n                } else {\r\n                    let arcColor = (startPercentage >= valuePercent) ? fallbackColor : color;\r\n                    let end = start + (arcLength * percentageToTravel);\r\n                    this._drawArc(start, end, arcColor);\r\n\r\n                    start = end;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _drawArc(start: number, end: number, color: string) {\r\n        let center = this._getCenter();\r\n        let radius = this._getRadius();\r\n        this._context.beginPath();\r\n        this._context.strokeStyle = color;\r\n        this._context.arc(center.x, center.y, radius, start, end, false);\r\n        this._context.stroke();\r\n    }\r\n\r\n    private _clear() {\r\n        this._context.clearRect(0, 0, this._getWidth(), this._getHeight());\r\n    }\r\n\r\n    private _getWidth() {\r\n        return this.size;\r\n    }\r\n\r\n    private _getHeight() {\r\n        return this.size;\r\n    }\r\n\r\n    // canvas height will be shorter for type 'semi' and 'arch'\r\n    private _getCanvasHeight() {\r\n        return (this.type == 'arch' || this.type == 'semi')\r\n            ? 0.85 * this._getHeight()\r\n            : this._getHeight();\r\n    }\r\n\r\n    private _getRadius() {\r\n        var center = this._getCenter();\r\n        return center.x - this.thick;\r\n    }\r\n\r\n    private _getCenter() {\r\n        var x = this._getWidth() / 2,\r\n            y = this._getHeight() / 2;\r\n        return { x, y };\r\n    }\r\n\r\n    private _init() {\r\n        this._context = (this._canvas.nativeElement as HTMLCanvasElement).getContext('2d');\r\n        this._initialized = true;\r\n        this._updateSize();\r\n        this._setupStyles();\r\n        this._create();\r\n    }\r\n\r\n    private _destroy() {\r\n        if (this._animationRequestID) {\r\n            window.cancelAnimationFrame(this._animationRequestID);\r\n            this._animationRequestID = 0;\r\n        }\r\n        this._clear();\r\n        this._context = null;\r\n        this._initialized = false;\r\n    }\r\n\r\n    private _setupStyles() {\r\n        this._context.lineCap = this.cap;\r\n        this._context.lineWidth = this.thick;\r\n    }\r\n\r\n    private _getForegroundColorByRange(value) {\r\n\r\n        const match = Object.keys(this.thresholds)\r\n            .filter(function (item) { return isNumber(item) && Number(item) <= value })\r\n            .sort((a, b) => Number(a) - Number(b))\r\n            .reverse()[0];\r\n\r\n        return match !== undefined\r\n            ? this.thresholds[match].color || this.foregroundColor\r\n            : this.foregroundColor;\r\n    }\r\n\r\n    private _create(nv?: number, ov?: number) {\r\n        let self = this,\r\n            type = this.type,\r\n            bounds = this._getBounds(type),\r\n            duration = this.duration,\r\n            min = this.min,\r\n            max = this.max,\r\n            value = clamp(this.value, this.min, this.max),\r\n            start = bounds.head,\r\n            unit = (bounds.tail - bounds.head) / (max - min),\r\n            displacement = unit * (value - min),\r\n            tail = bounds.tail,\r\n            color = this._getForegroundColorByRange(value),\r\n            startTime;\r\n\r\n        if (self._animationRequestID) {\r\n            window.cancelAnimationFrame(self._animationRequestID);\r\n        }\r\n\r\n        function animate(timestamp) {\r\n            timestamp = timestamp || new Date().getTime();\r\n            let runtime = timestamp - startTime;\r\n            let progress = Math.min(runtime / duration, 1);\r\n            let previousProgress = ov ? (ov - min) * unit : 0;\r\n            let middle = start + previousProgress + displacement * progress;\r\n\r\n            self._drawShell(start, middle, tail, color);\r\n            if (self._animationRequestID && (runtime < duration)) {\r\n                self._animationRequestID = window.requestAnimationFrame((timestamp) => animate(timestamp));\r\n            } else {\r\n                window.cancelAnimationFrame(self._animationRequestID);\r\n            }\r\n        }\r\n        if (this._animate) {\r\n            if (nv != undefined && ov != undefined) {\r\n                displacement = unit * nv - unit * ov;\r\n            }\r\n            self._animationRequestID = window.requestAnimationFrame((timestamp) => {\r\n                startTime = timestamp || new Date().getTime();\r\n                animate(startTime);\r\n            });\r\n        } else {\r\n            self._drawShell(start, start + displacement, tail, color);\r\n        }\r\n    }\r\n\r\n    private _update(nv: number, ov: number) {\r\n        this._clear();\r\n        this._create(nv, ov);\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxGauge } from './gauge/gauge';\r\nimport { NgxGaugeLabel, NgxGaugeValue, NgxGaugePrepend, NgxGaugeAppend } from './gauge/gauge-directives';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [NgxGauge, NgxGaugeAppend, NgxGaugePrepend, NgxGaugeValue, NgxGaugeLabel],\r\n  exports: [NgxGauge, NgxGaugeAppend, NgxGaugePrepend, NgxGaugeValue, NgxGaugeLabel]\r\n})\r\nexport class NgxGaugeModule { }"]}